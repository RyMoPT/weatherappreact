{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","useEffect","placesAutocomplete","require","places","appId","apiKey","container","document","querySelector","type","console","log","on","e","city","suggestion","name","country","countryCode","search","fetch","then","response","json","result","className","main","id","placeholder","onChange","target","value","sys","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","makeDate","Date","Math","round","temp","feels_like","icon","faWind","size","wind","speed","faTint","humidity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf96dcbc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWind } from '@fortawesome/free-solid-svg-icons'\nimport { faTint } from '@fortawesome/free-solid-svg-icons'\n\n\nconst api= {\n  key: \"576c98edd5621b7fe8cacfa5506e9654\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  //using useState initialize weather and query values\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState('');\n\n  //using useEffect to listen on the searchbar with the Algolia API \n  //then when a country is selected, run the search function.\n  //Also passed empty erray into second argument of useEffect for clean up and make sure\n  //that the effect will go back to initial value since this is what is needed in this case.\n    useEffect(\n      () => {\n    var places = require('places.js');\n    var placesAutocomplete = places({\n      appId: 'plALBLVXJIXG',\n      apiKey: 'a05d42ed7bda4067393cd25340bfd1e8',\n      container: document.querySelector('#searchbarplz'),\n      type: 'city'\n    });\n    console.log(placesAutocomplete)\n   \n    placesAutocomplete.on('change', (e) => {\n      let city = e.suggestion.name;\n      let country = e.suggestion.countryCode;\n      console.log(city)\n      search(city, country)\n      console.log(e)\n    });\n  },[]);\n  \n  //search openweather API using city and country values taken from Algolia API. Then changes weather state to render the results \n  const search = (city, country) => {\n    // if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${city},${country}&units=metric&APPID=${api.key}`)\n      .then(response => response.json())\n      .then(result => {\n        setWeather(result);\n        //resetting search bar value to empty string to clear it after the search\n        setQuery('');\n        console.log(result);\n        \n        })\n    // }\n  }\n  \n  const makeDate = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year} `\n  }\n  return (\n    \n    <div className={\n      (typeof weather.main !=\"undefined\") ? \n      ((weather.weather[0].main === 'Clouds') ? 'app clouds' : \n      ((weather.weather[0].main === 'Rain') ? 'app rain' :\n      ((weather.weather[0].main === 'Thunderstorm') ? 'app thunderstorm' :\n      ((weather.weather[0].main === 'Clear') ? 'app' :\n      ((weather.weather[0].main === 'Mist') ? 'app mist' :\n      ((weather.weather[0].main === 'Haze') ? 'app haze' :\n      ((weather.weather[0].main === 'Snow') ? 'app snow' : 'app'))))))) : 'app'\n    }\n      >\n       \n       <main>\n         <div className=\"searchBox\">\n           <input\n           type=\"search\"\n           id=\"searchbarplz\"\n           className=\"searchBar\"\n           placeholder=\"Location?\"\n           onChange= {(e) => {setQuery(e.target.value)}}\n           value= {query}\n           />\n           \n         </div>\n        {(typeof weather.main !=\"undefined\") ? (\n\n         <div className=\"locationBox\">\n          <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n          <div className=\"date\">\n            {makeDate(new Date())}\n          </div>\n           \n        <div className=\"weatherBox\">\n          <div className=\"temp\">{Math.round(weather.main.temp)}°C</div>\n          <div className=\"feelsLike\">Feels like {Math.round(weather.main.feels_like)}°C</div>\n          <div className=\"additionalStats\">\n            <div className=\"wind\">\n              <FontAwesomeIcon icon={faWind} size='2x'/>\n            <div className=\"windValue\">\n            {weather.wind.speed}km/h</div>\n            </div>\n            <div className=\"humidity\">\n            <FontAwesomeIcon icon={faTint} size='2x'/> \n            <div className=\"humidityValue\">\n              </div>{weather.main.humidity}%\n              </div>\n          </div>\n          <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n\n         \n       </main>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}